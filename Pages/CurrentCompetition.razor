@page "/currentCompetition";
@using WebAssemblyF.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.Http;
@using Microsoft.IdentityModel.Tokens;
@using Microsoft.Net.Http.Headers;
@using System.Net.Http.Headers;
@using WebAssemblyF.Pages;
@using WebAssemblyF.Services;
@using Newtonsoft.Json;
@using System.IdentityModel.Tokens.Jwt;
@using WebAssemblyF.Pages.Authentication;
@using System.Net.Http;
@using WebAssemblyF.Interface;
@using BlazorBootstrap;

@inject HttpClient Http
@inject IModalService Modal;
@inject IAccessTokenProvider TokenProvider;
@inject IDashboard DashboardService;

<p><h1>Today is @NameofCurrentCompetition competition</h1></p>

<table class="table">
	<thead>
		<tr>
			<th>Social Media code</th>
			<th>Current Competition admin</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>@AllCompetitionInfo.SMcode min</td>
			<td>@AllCompetitionInfo.CompetitionAdmin</td>
		</tr>
	</tbody>
</table>

<h3>Team table</h3>
<table class="table">
	<thead class="thead-dark">
		<tr>
			<th scope="col">Name of team</th>
			<th scope="col">Points</th>
			<th scope="col">Participants</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th scope="row">@currentTeam.Name</th>
			<td>@currentTeam.EarnedPoints</td>

			@*@foreach (var user in @currentTeam.ListOfParticipantsEmail)
			{
				<td>@user</td>
			}*@
			<td>
			@foreach (var email in currentTeam.ListOfParticipantsEmail.ToList())
					{
				@email <br />
					}
			</td>
		</tr>
	</tbody>
</table>

<table class="table">
	<thead>
		<tr>
			<th></th>
			<th>Pick new team participants</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>

				<div class="input-group mb-3">
					<input type="text" class="form-control" placeholder="Put here name of new team" @bind="@putTeamName" @oninput="@(x => { putTeamName = (string) x.Value;})" aria-label="Recipient's username" aria-describedby="basic-addon2">
					<div class="input-group-append">

						<button type="button" class="btn btn-success" @onclick="@(() => createTeam(putTeamName, emailsUser.ToArray()))">Create team</button>
					</div>
				</div>

			</td>
			<td>

				<div>
					@if (EmailToObject != null)
					{
						foreach (var email in EmailToObject)
						{
								var Text = email.email;
								bool Checked = false;
							if (emailsUser.Contains(email.email))
								{
									Checked = true;
								}
								<input type="checkbox" checked=@Checked
						   @onchange="eventArgs => { CheckboxClicked(email.email, eventArgs.Value); }" />
								@Text <br />
						}
					}
				</div>
			</td>
		</tr>
	</tbody>
</table>



@code {
	string NameofCurrentCompetition = "";
	public CompetitionModel AllCompetitionInfo { get; set; } = new CompetitionModel();
	public TeamModel currentTeam { get; set; } = new TeamModel();
	public CreateTeamBody createTeamBody { get; set; }
	public string putTeamName = "";
	public List<EmailToObject> EmailToObject { get; set; } = new List<EmailToObject>();
	public List<string> allUsersNames = new List<string>();
	public List<UserModel> allUsers = new List<UserModel>();
	public List<string> emailsUser = new List<string>();


	protected override async Task OnInitializedAsync()
	{
		await CallApi();
	}

	async Task CallApi()
	{
		var accessTokenResult = await TokenProvider.RequestAccessToken();
		var AccessToken = string.Empty;
		string mail = "";

		if (accessTokenResult.TryGetToken(out var token))
		{
			AccessToken = token.Value;
			var handler = new JwtSecurityTokenHandler();
			var jwtSecurityToken = handler.ReadJwtToken(AccessToken);
			mail = jwtSecurityToken.Claims.First(c => c.Type == "mail").Value;
		}
		Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);

		var allTeams = await Http.GetFromJsonAsync<List<TeamModel>>("http://localhost:2050/team/readAll");
		if (allTeams is not null)
		{
			foreach (var oneTeam in allTeams)
			{
				foreach (var oneEmail in oneTeam.ListOfParticipantsEmail)
				{
					if (oneEmail == mail)
					{
						currentTeam = oneTeam;
					}
				}
			}
		}

		var allCompetition = await Http.GetFromJsonAsync<List<CompetitionModel>>("/api/Competition");
		if (allCompetition is not null)
		{
			foreach (var oneCompetition in allCompetition)
			{
				if (oneCompetition.Status == "Running")
				{
					NameofCurrentCompetition = oneCompetition.Name;
					AllCompetitionInfo = oneCompetition;
					allUsersNames = oneCompetition.Participants;
				}
			}
		}
		allUsers = await Http.GetFromJsonAsync<List<UserModel>>("/api/User");

		foreach (var user in allUsers)
		{
			EmailToObject.Add
			(new EmailToObject(user.email, new List<string>(AllCompetitionInfo.Participants)));
			emailsUser.Add(new string(user.email));
		}
	}


	async Task createTeam(string teamName, string[] listOfParticipantsEmail)
	{
		using (var client = new HttpClient())
		{
			var accessTokenResult = await TokenProvider.RequestAccessToken();
			var AccessToken = string.Empty;
			if (accessTokenResult.TryGetToken(out var token)) AccessToken = token.Value;

			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
			createTeamBody = new CreateTeamBody(teamName, listOfParticipantsEmail);
			var response = client.PostAsJsonAsync("http://localhost:2050/teamManager/createTeam/", createTeamBody);
		}
	}

	async Task CheckboxClicked(string col, object aChecked)
	{
		
			if ((bool)aChecked)
			{
			if (!emailsUser.Contains(col))
				{
				emailsUser.Add(col);
				}
			}
			else
			{
			if (emailsUser.Contains(col))
				{
				emailsUser.Remove(col);
				}
			}
	}


}

