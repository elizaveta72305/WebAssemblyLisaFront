@page "/dashboard";
@using WebAssemblyF.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.Extensions.Http;
@using Microsoft.Net.Http.Headers;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using WebAssemblyF.Pages.Authentication;
@using System.Net.Http;
@using BlazorBootstrap;


@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider

<h3>Your dashboard </h3>
@if (MyTask == null)
{
	<p><em> Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>TaskCategory</th>
				<th>DurationLimit</th>
				<th>Points</th>
				<th>ExtraTime</th>
				<th>ExtraPoints</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var task in MyTask)
			{
				<tr>
					<td>@task.Name</td>
					<td>
				@foreach (var category in @task.TaskCategory)
				{
						<span>@category </span>
				}
					</td>
					<td>@task.DurationLimit min</td>
					<td>@task.Points</td>
					<td>@task.ExtraTime min</td>
					<td>@task.ExtraPoints </td>
					<p><Button Color="ButtonColor.Success"> Success </Button></p>
				</tr>
			}
		</tbody>
	</table>
}
@code {

	private List<TaskModel> MyTask;

	protected override async Task OnInitializedAsync()
	{
		await CallApi();
	}

	async Task CallApi()
	{
		var accessTokenResult = await TokenProvider.RequestAccessToken();
		var AccessToken = string.Empty;
		if (accessTokenResult.TryGetToken(out var token))
		{
			AccessToken = token.Value;
		}
		Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
		MyTask = await Http.GetFromJsonAsync<List<TaskModel>>("/api/Task");
	
	}
}