@page "/dashboard";
@using WebAssemblyF.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.Http;
@using Microsoft.IdentityModel.Tokens;
@using Microsoft.Net.Http.Headers;
@using System.Net.Http.Headers;
@using WebAssemblyF.Pages;
@using WebAssemblyF.Services;
@using Newtonsoft.Json;
@using System.IdentityModel.Tokens.Jwt;
@using WebAssemblyF.Pages.Authentication;
@using System.Net.Http;
@using WebAssemblyF.Interface;
@using BlazorBootstrap;

@attribute [Authorize(Policy=Policies.IsParticipant)]
@inject HttpClient Http
@inject IModalService Modal;
@inject IAccessTokenProvider TokenProvider;
@inject IDashboard DashboardService;

<h3>Your dashboard </h3>

	<AuthorizeView Policy="@Policies.IsParticipant">
		Hello @context.User.Identity.Name! <br/>

	You are participant of competition in "<span>@NameofCurrentTeam</span>"

	@foreach (var task in @listOfTasksDynamicSolved)
				{
		<span>@task </span>
	}

</AuthorizeView>

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th>TaskCategory</th>
			<th>DurationLimit</th>
			<th>Points</th>
			<th>ExtraTime</th>
			<th>ExtraPoints</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var task in DashboardService.myStaticTask)
		{
			<tr>
				<td><button @onclick="@(() => Modal.Show<Counter>("Task conditions"))"> Take Task>@task.Name</button></td>

				<td>
					@foreach (var category in @task.TaskCategory)
					{
						<span>@category </span>
					}
				</td>
				<td>@task.DurationLimit min</td>
				<td>@task.Points</td>
				<td>@task.ExtraTime min</td>
				<td>@task.ExtraPoints </td>
				<p><Button Color="ButtonColor.Success" @onclick="@(() => Modal.Show<Counter>("Task conditions"))"> Take Task </Button></p>
			</tr>
		}
	</tbody>
</table>

@code {

	string NameofCurrentTeam { get; set; }
	public ITaskDynamic[] listOfTasksDynamicSolved { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await CallApi();

		//await DashboardService.GetAllTaskStatic();
		//await DashboardService.Initialise();
		//await DashboardService.GetTeamByEmail();
	}

	async Task CallApi()
	{
		var accessTokenResult = await TokenProvider.RequestAccessToken();
		var AccessToken = string.Empty;
		string mail = "";

		if (accessTokenResult.TryGetToken(out var token))
		{
			AccessToken = token.Value;
			var handler = new JwtSecurityTokenHandler();
			var jwtSecurityToken = handler.ReadJwtToken(AccessToken);
			mail = jwtSecurityToken.Claims.First(c => c.Type == "mail").Value;
		}
		Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);

		var allUsers = await Http.GetFromJsonAsync<List<UserModel>>("/api/User");
		if (allUsers is not null)
		{
			foreach (var oneUser in allUsers)
			{
				if (oneUser.Email == mail)
				{
					NameofCurrentTeam = oneUser.TeamName;
				}
			}
		}

		var getTeams = await Http.GetFromJsonAsync<List<TeamModel>>("http://localhost:2050/team/readAll");
		if (getTeams is not null)
		{
			foreach (var oneTeam in getTeams)
			{
				if (oneTeam.Name == NameofCurrentTeam)
				{
					listOfTasksDynamicSolved = oneTeam.ListOfTasksDynamicSolved;
				}
				}
			}
	}
}